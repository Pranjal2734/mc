import numpy as np 
import matplotlib.pyplot as plt

#Set the parameters
n_bits = 1000000
SNRdBs = np.arange(-18, 11, 1) 
SNRs = 10** (SNRdBs/10) 

#Generate random bits
bits = np.random.randint(0, 2, n_bits)

#Loop over SNR values
BERs = [] 
for SNR in SNRs:

#BPSK modulation 
    symbols = 2*bits - 1
    noise_power = 1/SNR
    noise = np.sqrt(noise_power)*np.random.randn(n_bits)
    received = symbols + noise

#BPSK demodulation
    decoded_bits = (received >= 0).astype (int)
    
#Calculate the bit error rate
    BER= np.sum(bits != decoded_bits) / n_bits
    BERs.append(BER)

# Plot the results
plt.semilogy (SNRdBs, BERs)
plt.xlabel('SNR (dB)') 
plt.ylabel('Bit Error Rate')
plt.title('Bit Error Rate vs. SNR for BPSK modulation with AMGN')
plt.grid(True)
plt.show()


In this experiment, we will derive the theoretical equation for bit error rate (BER) with Binary Phase Shift Keying (BPSK) modulation scheme in 
Additive White Gaussian Noise (AWGN) channel. The BER results obtained using Matlab/Octave simulation scripts show good agreement with the 
derived theoretical results
With Binary Phase Shift Keying (BPSK), the binary digits 1 and 0 maybe represented by the analog levels +√Eb and -√Eb respectively. 
The system model is as shown in the Figure below.



Simulation model
Matlab/Octave source code for computing the bit error rate with BPSK modulation from theory and simulation. The code performs the following:
(a) Generation of random BPSK modulated symbols +1's and -1's
(b) Passing them through Additive White Gaussian Noise channel
(c) Demodulation of the received symbol based on the location in the constellation
(d) Counting the number of errors
(e) Repeating the same for multiple Eb/No value.
